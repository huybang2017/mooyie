generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
  USED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum MovieStatus {
  coming_soon
  now_showing
  ended
}

enum SeatType {
  REGULAR
  PREMIUM
}

enum StatusTheater {
  active
  inactive
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  role          Role     @default(USER)
  phone         String
  status        Boolean  @default(true)
  avatar        String?
  watchedMovies Json?
  createdAt     DateTime @default(now())

  bookings      Booking[]
  comments      Comment[]
  bookmarks     Bookmark[]
  notifications Notification[]
}

model Movie {
  id          String      @id @default(uuid())
  title       String
  genre       String
  duration    Int
  description String
  trailer_url String?
  image       String
  status      MovieStatus @default(coming_soon)
  createdAt   DateTime    @default(now())

  showtimes Showtime[]
  comments  Comment[]
  bookmarks Bookmark[]
}

model Theater {
  id        String        @id @default(uuid())
  name      String
  location  String
  brand     String
  brandLogo String?
  status    StatusTheater @default(active)
  createdAt DateTime      @default(now())

  rooms Room[]
}

model Room {
  id        String   @id @default(uuid())
  name      String
  seatCount Int
  createdAt DateTime @default(now())

  theaterId String
  theater   Theater    @relation(fields: [theaterId], references: [id])
  seats     Seat[]
  showtimes Showtime[]
}

model Seat {
  id     String   @id @default(uuid())
  row    String
  number Int
  price  Float
  type   SeatType @default(REGULAR)

  roomId String
  room   Room   @relation(fields: [roomId], references: [id])
}

model Showtime {
  id        String   @id @default(uuid())
  time      Json?
  seats     Json?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  movieId String
  movie   Movie  @relation(fields: [movieId], references: [id])

  bookings Booking[]

  roomId String?
  room   Room?   @relation(fields: [roomId], references: [id])
}

model Booking {
  id         String        @id @default(uuid())
  seats      Json
  totalPrice Float
  status     BookingStatus
  createdAt  DateTime      @default(now())
  expireAt   DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  showtimeId String
  showtime   Showtime @relation(fields: [showtimeId], references: [id])

  payment Payment?
  history TicketHistory[]
}

model Payment {
  id              String        @id @default(uuid())
  amount          Float
  status          PaymentStatus
  stripePaymentId String
  paidAt          DateTime      @default(now())

  bookingId String  @unique
  booking   Booking @relation(fields: [bookingId], references: [id])
}

model Bookmark {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  movieId String
  movie   Movie  @relation(fields: [movieId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  rating    Float
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  movieId String
  movie   Movie  @relation(fields: [movieId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model TicketHistory {
  id        String        @id @default(uuid())
  status    BookingStatus
  updatedAt DateTime      @default(now())
  note      String?

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])
}
